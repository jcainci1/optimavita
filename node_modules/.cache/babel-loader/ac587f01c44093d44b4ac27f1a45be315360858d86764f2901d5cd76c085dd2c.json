{"ast":null,"code":"import _objectSpread from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _observers, _mutationCache, _retryer, _dispatch;\n// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = (_observers = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _dispatch = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Removable) {\n  _inherits(Mutation, _Removable);\n  var _super = _createSuper(Mutation);\n  function Mutation(config) {\n    var _this;\n    _classCallCheck(this, Mutation);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _dispatch);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _observers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _mutationCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _retryer, {\n      writable: true,\n      value: void 0\n    });\n    _this.mutationId = config.mutationId;\n    _classPrivateFieldSet(_assertThisInitialized(_this), _mutationCache, config.mutationCache);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _observers, []);\n    _this.state = config.state || getDefaultState();\n    _this.setOptions(config.options);\n    _this.scheduleGc();\n    return _this;\n  }\n  _createClass(Mutation, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n      this.updateGcTime(this.options.gcTime);\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!_classPrivateFieldGet(this, _observers).includes(observer)) {\n        _classPrivateFieldGet(this, _observers).push(observer);\n        this.clearGcTimeout();\n        _classPrivateFieldGet(this, _mutationCache).notify({\n          type: \"observerAdded\",\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      _classPrivateFieldSet(this, _observers, _classPrivateFieldGet(this, _observers).filter(function (x) {\n        return x !== observer;\n      }));\n      this.scheduleGc();\n      _classPrivateFieldGet(this, _mutationCache).notify({\n        type: \"observerRemoved\",\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!_classPrivateFieldGet(this, _observers).length) {\n        if (this.state.status === \"pending\") {\n          this.scheduleGc();\n        } else {\n          _classPrivateFieldGet(this, _mutationCache).remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var _classPrivateFieldGet2, _classPrivateFieldGet3;\n      return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.continue()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 :\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables);\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(variables) {\n        var _this2 = this,\n          _this$options$retry;\n        var restored, isPaused, _classPrivateFieldGet6, _classPrivateFieldGet7, _this$options$onSucce, _this$options2, _classPrivateFieldGet8, _classPrivateFieldGet9, _this$options$onSettl, _this$options3, _classPrivateFieldGet4, _classPrivateFieldGet5, _this$options$onMutat, _this$options, context, data, _classPrivateFieldGet10, _classPrivateFieldGet11, _this$options$onError, _this$options4, _classPrivateFieldGet12, _classPrivateFieldGet13, _this$options$onSettl2, _this$options5;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _classPrivateFieldSet(this, _retryer, createRetryer({\n                fn: function fn() {\n                  if (!_this2.options.mutationFn) {\n                    return Promise.reject(new Error(\"No mutationFn found\"));\n                  }\n                  return _this2.options.mutationFn(variables);\n                },\n                onFail: function onFail(failureCount, error) {\n                  _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n                    type: \"failed\",\n                    failureCount: failureCount,\n                    error: error\n                  });\n                },\n                onPause: function onPause() {\n                  _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n                    type: \"pause\"\n                  });\n                },\n                onContinue: function onContinue() {\n                  _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n                    type: \"continue\"\n                  });\n                },\n                retry: (_this$options$retry = this.options.retry) !== null && _this$options$retry !== void 0 ? _this$options$retry : 0,\n                retryDelay: this.options.retryDelay,\n                networkMode: this.options.networkMode,\n                canRun: function canRun() {\n                  return _classPrivateFieldGet(_this2, _mutationCache).canRun(_this2);\n                }\n              }));\n              restored = this.state.status === \"pending\";\n              isPaused = !_classPrivateFieldGet(this, _retryer).canStart();\n              _context.prev = 3;\n              if (restored) {\n                _context.next = 12;\n                break;\n              }\n              _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                type: \"pending\",\n                variables: variables,\n                isPaused: isPaused\n              });\n              _context.next = 8;\n              return (_classPrivateFieldGet4 = (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _mutationCache).config).onMutate) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.call(_classPrivateFieldGet5, variables, this);\n            case 8:\n              _context.next = 10;\n              return (_this$options$onMutat = (_this$options = this.options).onMutate) === null || _this$options$onMutat === void 0 ? void 0 : _this$options$onMutat.call(_this$options, variables);\n            case 10:\n              context = _context.sent;\n              if (context !== this.state.context) {\n                _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                  type: \"pending\",\n                  context: context,\n                  variables: variables,\n                  isPaused: isPaused\n                });\n              }\n            case 12:\n              _context.next = 14;\n              return _classPrivateFieldGet(this, _retryer).start();\n            case 14:\n              data = _context.sent;\n              _context.next = 17;\n              return (_classPrivateFieldGet6 = (_classPrivateFieldGet7 = _classPrivateFieldGet(this, _mutationCache).config).onSuccess) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.call(_classPrivateFieldGet7, data, variables, this.state.context, this);\n            case 17:\n              _context.next = 19;\n              return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) === null || _this$options$onSucce === void 0 ? void 0 : _this$options$onSucce.call(_this$options2, data, variables, this.state.context);\n            case 19:\n              _context.next = 21;\n              return (_classPrivateFieldGet8 = (_classPrivateFieldGet9 = _classPrivateFieldGet(this, _mutationCache).config).onSettled) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.call(_classPrivateFieldGet9, data, null, this.state.variables, this.state.context, this);\n            case 21:\n              _context.next = 23;\n              return (_this$options$onSettl = (_this$options3 = this.options).onSettled) === null || _this$options$onSettl === void 0 ? void 0 : _this$options$onSettl.call(_this$options3, data, null, variables, this.state.context);\n            case 23:\n              _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                type: \"success\",\n                data: data\n              });\n              return _context.abrupt(\"return\", data);\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](3);\n              _context.prev = 29;\n              _context.next = 32;\n              return (_classPrivateFieldGet10 = (_classPrivateFieldGet11 = _classPrivateFieldGet(this, _mutationCache).config).onError) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.call(_classPrivateFieldGet11, _context.t0, variables, this.state.context, this);\n            case 32:\n              _context.next = 34;\n              return (_this$options$onError = (_this$options4 = this.options).onError) === null || _this$options$onError === void 0 ? void 0 : _this$options$onError.call(_this$options4, _context.t0, variables, this.state.context);\n            case 34:\n              _context.next = 36;\n              return (_classPrivateFieldGet12 = (_classPrivateFieldGet13 = _classPrivateFieldGet(this, _mutationCache).config).onSettled) === null || _classPrivateFieldGet12 === void 0 ? void 0 : _classPrivateFieldGet12.call(_classPrivateFieldGet13, void 0, _context.t0, this.state.variables, this.state.context, this);\n            case 36:\n              _context.next = 38;\n              return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) === null || _this$options$onSettl2 === void 0 ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, _context.t0, variables, this.state.context);\n            case 38:\n              throw _context.t0;\n            case 39:\n              _context.prev = 39;\n              _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                type: \"error\",\n                error: _context.t0\n              });\n              return _context.finish(39);\n            case 42:\n              _context.prev = 42;\n              _classPrivateFieldGet(this, _mutationCache).runNext(this);\n              return _context.finish(42);\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 27, 42, 45], [29,, 39, 42]]);\n      }));\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return Mutation;\n}(Removable));\nfunction _dispatch2(action) {\n  var _this3 = this;\n  var reducer = function reducer(state) {\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          failureCount: action.failureCount,\n          failureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: true\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: false\n        });\n      case \"pending\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          context: action.context,\n          data: void 0,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          isPaused: action.isPaused,\n          status: \"pending\",\n          variables: action.variables,\n          submittedAt: Date.now()\n        });\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          status: \"success\",\n          isPaused: false\n        });\n      case \"error\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: void 0,\n          error: action.error,\n          failureCount: state.failureCount + 1,\n          failureReason: action.error,\n          isPaused: false,\n          status: \"error\"\n        });\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(function () {\n    _classPrivateFieldGet(_this3, _observers).forEach(function (observer) {\n      observer.onMutationUpdate(action);\n    });\n    _classPrivateFieldGet(_this3, _mutationCache).notify({\n      mutation: _this3,\n      type: \"updated\",\n      action: action\n    });\n  });\n}\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"names":["notifyManager","Removable","createRetryer","Mutation","_observers","WeakMap","_mutationCache","_retryer","_dispatch","WeakSet","_Removable","_inherits","_super","_createSuper","config","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","mutationId","_classPrivateFieldSet","mutationCache","state","getDefaultState","setOptions","options","scheduleGc","_createClass","key","updateGcTime","gcTime","get","meta","addObserver","observer","_classPrivateFieldGet","includes","push","clearGcTimeout","notify","type","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","_continue","_classPrivateFieldGet2","_classPrivateFieldGet3","continue","execute","variables","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","_this$options$retry","restored","isPaused","_classPrivateFieldGet6","_classPrivateFieldGet7","_this$options$onSucce","_this$options2","_classPrivateFieldGet8","_classPrivateFieldGet9","_this$options$onSettl","_this$options3","_classPrivateFieldGet4","_classPrivateFieldGet5","_this$options$onMutat","_this$options","context","data","_classPrivateFieldGet10","_classPrivateFieldGet11","_this$options$onError","_this$options4","_classPrivateFieldGet12","_classPrivateFieldGet13","_this$options$onSettl2","_this$options5","wrap","_callee$","_context","prev","next","fn","mutationFn","Promise","reject","Error","onFail","failureCount","error","_classPrivateMethodGet","_dispatch2","onPause","onContinue","retry","retryDelay","networkMode","canRun","canStart","onMutate","sent","start","onSuccess","onSettled","abrupt","t0","onError","finish","runNext","stop","_x","apply","arguments","action","_this3","reducer","_objectSpread","failureReason","submittedAt","Date","now","batch","forEach","onMutationUpdate"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/query-core/src/mutation.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (!restored) {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}