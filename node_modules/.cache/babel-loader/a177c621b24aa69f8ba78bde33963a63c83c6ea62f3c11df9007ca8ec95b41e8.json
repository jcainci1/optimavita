{"ast":null,"code":"// src/suspense.ts\nvar defaultThrowOnError = function defaultThrowOnError(_error, query) {\n  return query.state.data === void 0;\n};\nvar ensureSuspenseTimers = function ensureSuspenseTimers(defaultedOptions) {\n  var originalStaleTime = defaultedOptions.staleTime;\n  if (defaultedOptions.suspense) {\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? function () {\n      return Math.max(originalStaleTime.apply(void 0, arguments), 1e3);\n    } : Math.max(originalStaleTime !== null && originalStaleTime !== void 0 ? originalStaleTime : 1e3, 1e3);\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);\n    }\n  }\n};\nvar willFetch = function willFetch(result, isRestoring) {\n  return result.isLoading && result.isFetching && !isRestoring;\n};\nvar shouldSuspend = function shouldSuspend(defaultedOptions, result) {\n  return (defaultedOptions === null || defaultedOptions === void 0 ? void 0 : defaultedOptions.suspense) && result.isPending;\n};\nvar fetchOptimistic = function fetchOptimistic(defaultedOptions, observer, errorResetBoundary) {\n  return observer.fetchOptimistic(defaultedOptions).catch(function () {\n    errorResetBoundary.clearReset();\n  });\n};\nexport { defaultThrowOnError, ensureSuspenseTimers, fetchOptimistic, shouldSuspend, willFetch };","map":{"version":3,"names":["defaultThrowOnError","_error","query","state","data","ensureSuspenseTimers","defaultedOptions","originalStaleTime","staleTime","suspense","Math","max","apply","arguments","gcTime","willFetch","result","isRestoring","isLoading","isFetching","shouldSuspend","isPending","fetchOptimistic","observer","errorResetBoundary","catch","clearReset"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/react-query/src/suspense.ts"],"sourcesContent":["import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  const originalStaleTime = defaultedOptions.staleTime\n\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => Math.max(originalStaleTime(...args), 1000)\n        : Math.max(originalStaleTime ?? 1000, 1000)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n"],"mappings":";AAUO,IAAMA,mBAAA,GAAsB,SAAtBA,oBAMXC,MAAA,EACAC,KAAA;EAAA,OACGA,KAAA,CAAMC,KAAA,CAAMC,IAAA,KAAS;AAAA;AAEnB,IAAMC,oBAAA,GAAuB,SAAvBA,qBACXC,gBAAA,EACG;EACH,IAAMC,iBAAA,GAAoBD,gBAAA,CAAiBE,SAAA;EAE3C,IAAIF,gBAAA,CAAiBG,QAAA,EAAU;IAG7BH,gBAAA,CAAiBE,SAAA,GACf,OAAOD,iBAAA,KAAsB,aACzB;MAAA,OAAaG,IAAA,CAAKC,GAAA,CAAIJ,iBAAA,CAAAK,KAAA,SAAAC,SAAyB,GAAG,GAAI;IAAA,IACtDH,IAAA,CAAKC,GAAA,CAAIJ,iBAAA,aAAAA,iBAAA,cAAAA,iBAAA,GAAqB,KAAM,GAAI;IAE9C,IAAI,OAAOD,gBAAA,CAAiBQ,MAAA,KAAW,UAAU;MAC/CR,gBAAA,CAAiBQ,MAAA,GAASJ,IAAA,CAAKC,GAAA,CAAIL,gBAAA,CAAiBQ,MAAA,EAAQ,GAAI;IAClE;EACF;AACF;AAEO,IAAMC,SAAA,GAAY,SAAZA,UACXC,MAAA,EACAC,WAAA;EAAA,OACGD,MAAA,CAAOE,SAAA,IAAaF,MAAA,CAAOG,UAAA,IAAc,CAACF,WAAA;AAAA;AAExC,IAAMG,aAAA,GAAgB,SAAhBA,cACXd,gBAAA,EAGAU,MAAA;EAAA,OACG,CAAAV,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA,CAAkBG,QAAA,KAAYO,MAAA,CAAOK,SAAA;AAAA;AAEnC,IAAMC,eAAA,GAAkB,SAAlBA,gBAOXhB,gBAAA,EAOAiB,QAAA,EACAC,kBAAA;EAAA,OAEAD,QAAA,CAASD,eAAA,CAAgBhB,gBAAgB,EAAEmB,KAAA,CAAM,YAAM;IACrDD,kBAAA,CAAmBE,UAAA,CAAW;EAChC,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}