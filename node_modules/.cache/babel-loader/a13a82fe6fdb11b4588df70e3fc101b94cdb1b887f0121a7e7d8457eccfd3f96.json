{"ast":null,"code":"\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"./utils.js\";\nvar ensurePreventErrorBoundaryRetry = function ensurePreventErrorBoundaryRetry(options, errorResetBoundary) {\n  if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = function useClearResetErrorBoundary(errorResetBoundary) {\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = function getHasError(_ref) {\n  var result = _ref.result,\n    errorResetBoundary = _ref.errorResetBoundary,\n    throwOnError = _ref.throwOnError,\n    query = _ref.query;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);\n};\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary };","map":{"version":3,"names":["React","shouldThrowError","ensurePreventErrorBoundaryRetry","options","errorResetBoundary","suspense","throwOnError","experimental_prefetchInRender","isReset","retryOnMount","useClearResetErrorBoundary","useEffect","clearReset","getHasError","_ref","result","query","isError","isFetching","error"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    shouldThrowError(throwOnError, [result.error, query])\n  )\n}\n"],"mappings":";;;AACA,YAAYA,KAAA,MAAW;AACvB,SAASC,gBAAA,QAAwB;AAU1B,IAAMC,+BAAA,GAAkC,SAAlCA,gCAOXC,OAAA,EAOAC,kBAAA,EACG;EACH,IACED,OAAA,CAAQE,QAAA,IACRF,OAAA,CAAQG,YAAA,IACRH,OAAA,CAAQI,6BAAA,EACR;IAEA,IAAI,CAACH,kBAAA,CAAmBI,OAAA,CAAQ,GAAG;MACjCL,OAAA,CAAQM,YAAA,GAAe;IACzB;EACF;AACF;AAEO,IAAMC,0BAAA,GAA6B,SAA7BA,2BACXN,kBAAA,EACG;EACGJ,KAAA,CAAAW,SAAA,CAAU,YAAM;IACpBP,kBAAA,CAAmBQ,UAAA,CAAW;EAChC,GAAG,CAACR,kBAAkB,CAAC;AACzB;AAEO,IAAMS,WAAA,GAAc,SAAdA,YAAAC,IAAA,EAgBP;EAAA,IATJC,MAAA,GAAAD,IAAA,CAAAC,MAAA;IACAX,kBAAA,GAAAU,IAAA,CAAAV,kBAAA;IACAE,YAAA,GAAAQ,IAAA,CAAAR,YAAA;IACAU,KAAA,GAAAF,IAAA,CAAAE,KAAA;EAOA,OACED,MAAA,CAAOE,OAAA,IACP,CAACb,kBAAA,CAAmBI,OAAA,CAAQ,KAC5B,CAACO,MAAA,CAAOG,UAAA,IACRF,KAAA,IACAf,gBAAA,CAAiBK,YAAA,EAAc,CAACS,MAAA,CAAOI,KAAA,EAAOH,KAAK,CAAC;AAExD"},"metadata":{},"sourceType":"module","externalDependencies":[]}