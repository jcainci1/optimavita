{"ast":null,"code":"import _objectSpread from \"/Users/JarredCianciulli/Desktop/Applications/Projects/ChooseYouCoaching/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/JarredCianciulli/Desktop/Applications/Projects/ChooseYouCoaching/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/JarredCianciulli/Desktop/Applications/Projects/ChooseYouCoaching/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/JarredCianciulli/Desktop/Applications/Projects/ChooseYouCoaching/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nvar hiddenVisibility = {\n  visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nvar id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nvar projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n    defaultParent = _ref.defaultParent,\n    measureScroll = _ref.measureScroll,\n    checkIsScrollRoot = _ref.checkIsScrollRoot,\n    _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode() {\n      var _this = this;\n      var latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      _classCallCheck(this, ProjectionNode);\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false;\n      // Note: Currently only running on root node\n      this.updateScheduled = false;\n      this.projectionUpdateScheduled = false;\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = function () {\n        _this.projectionUpdateScheduled = false;\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n        _this.nodes.forEach(propagateDirtyNodes);\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n        _this.nodes.forEach(cleanDirtyNodes);\n        record(projectionFrameData);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        subscriptionManager && subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n      /**\n       * Lifecycles\n       */\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n        if (this.instance) return;\n        this.isSVG = isSVGElement(instance);\n        this.instance = instance;\n        var _this$options = this.options,\n          layoutId = _this$options.layoutId,\n          layout = _this$options.layout,\n          visualElement = _this$options.visualElement;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        this.parent && this.parent.children.add(this);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var cancelDelay;\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n              hasLayoutChanged = _ref2.hasLayoutChanged,\n              hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n              newLayout = _ref2.layout;\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = _this2.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n            var _visualElement$getPro = visualElement.getProps(),\n              onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this2.targetLayout || !boxEqualsRounded(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (_this2.options.layoutRoot || _this2.resumeFrom && _this2.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion || _this2.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged) {\n                finishAnimation(_this2);\n              }\n              if (_this2.isLead() && _this2.options.onExitComplete) {\n                _this2.options.onExitComplete();\n              }\n            }\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        var stack = this.getStack();\n        stack && stack.remove(this);\n        this.parent && this.parent.children.delete(this);\n        this.instance = undefined;\n        cancelFrame(this.updateProjection);\n      }\n      // only on the root\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n      }\n      // Note: currently only running on root node\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        this.nodes && this.nodes.forEach(resetRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"getTransformTemplate\",\n      value: function getTransformTemplate() {\n        var visualElement = this.options.visualElement;\n        return visualElement && visualElement.getProps().transformTemplate;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.root.hasTreeAnimated = true;\n        if (this.root.isUpdateBlocked()) {\n          this.options.onExitComplete && this.options.onExitComplete();\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n        var _this$options2 = this.options,\n          layoutId = _this$options2.layoutId,\n          layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = this.getTransformTemplate();\n        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.updateScheduled = false;\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) {\n          this.nodes.forEach(clearIsLayoutDirty);\n        }\n        this.isUpdating = false;\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        /**\n         * Manually flush any pending updates. Ideally\n         * we could leave this to the following requestAnimationFrame but this seems\n         * to leave a flash of incorrectly styled content.\n         */\n        var now = time.now();\n        frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n        frameData.timestamp = now;\n        frameData.isProcessing = true;\n        steps.update.process(frameData);\n        steps.preRender.process(frameData);\n        steps.render.process(frameData);\n        frameData.isProcessing = false;\n      }\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var _this3 = this;\n        if (!this.updateScheduled) {\n          this.updateScheduled = true;\n          microtask.read(function () {\n            return _this3.update();\n          });\n        }\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        if (!this.projectionUpdateScheduled) {\n          this.projectionUpdateScheduled = true;\n          frame.preRender(this.updateProjection, false, true);\n        }\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this4 = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        frame.postRender(function () {\n          if (_this4.isLayoutDirty) {\n            _this4.root.didUpdate();\n          } else {\n            _this4.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        var visualElement = this.options.visualElement;\n        visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = this.getTransformTemplate();\n        var transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n            options = node.options;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n        this.isProjectionDirty = true;\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n    }, {\n      key: \"forceRelativeParentToResolveTarget\",\n      value: function forceRelativeParentToResolveTarget() {\n        if (!this.relativeParent) return;\n        /**\n         * If the parent target isn't up-to-date, force it to update.\n         * This is an unfortunate de-optimisation as it means any updating relative\n         * projection will cause all the relative parents to recalculate back\n         * up the tree.\n         */\n        if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n          this.relativeParent.resolveTargetDelta(true);\n        }\n      }\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var _a;\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n        var lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n        var canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n        if (canSkip) return;\n        var _this$options3 = this.options,\n          layout = _this$options3.layout,\n          layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        this.resolvedRelativeTargetAt = frameData.timestamp;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        if (!this.targetDelta && !this.relativeTarget) {\n          var relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n            this.relativeParent = relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n          this.forceRelativeParentToResolveTarget();\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          var _relativeParent = this.getClosestProjectingParent();\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target && this.animationProgress !== 1) {\n            this.relativeParent = _relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * Increase debug counter for resolved target deltas\n         */\n        projectionFrameData.resolvedTargetDeltas++;\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n        if (this.parent.isProjecting()) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"isProjecting\",\n      value: function isProjecting() {\n        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n        var lead = this.getLead();\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        var canSkip = true;\n        /**\n         * If this is a normal layout animation and neither this node nor its nearest projecting\n         * is dirty then we can't skip.\n         */\n        if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If this is a shared layout animation and this node's shared projection is dirty then\n         * we can't skip.\n         */\n        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If we have resolved the target this frame we must recalculate the\n         * projection to ensure it visually represents the internal calculations.\n         */\n        if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n          canSkip = false;\n        }\n        if (canSkip) return;\n        var _this$options4 = this.options,\n          layout = _this$options4.layout,\n          layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Record previous tree scales before updating.\n         */\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        /**\n         * If this layer needs to perform scale correction but doesn't have a target,\n         * use the layout as the target.\n         */\n        if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n          lead.target = lead.layout.layoutBox;\n          lead.targetWithTransforms = createBox();\n        }\n        var target = lead.target;\n        if (!target) {\n          /**\n           * If we don't have a target to project into, but we were previously\n           * projecting, we want to remove the stored transform and schedule\n           * a render to ensure the elements reflect the removed transform.\n           */\n          if (this.projectionTransform) {\n            this.projectionDelta = createDelta();\n            this.projectionTransform = \"none\";\n            this.scheduleRender();\n          }\n          return;\n        }\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n        /**\n         * Increase debug counter for recalculated projections\n         */\n        projectionFrameData.recalculatedProjection++;\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.options.scheduleRender && this.options.scheduleRender();\n        if (notifyAll) {\n          var stack = this.getStack();\n          stack && stack.scheduleRender();\n        }\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this5 = this;\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n        var mixedValues = _objectSpread({}, this.latestValues);\n        var targetDelta = createDelta();\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var snapshotSource = snapshot ? snapshot.source : undefined;\n        var layoutSource = this.layout ? this.layout.source : undefined;\n        var isSharedLayoutAnimation = snapshotSource !== layoutSource;\n        var stack = this.getStack();\n        var isOnlyMember = !stack || stack.members.length <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        var prevRelativeTarget;\n        this.mixTargetDelta = function (latest) {\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this5.setTargetDelta(targetDelta);\n          if (_this5.relativeTarget && _this5.relativeTargetOrigin && _this5.layout && _this5.relativeParent && _this5.relativeParent.layout) {\n            calcRelativePosition(relativeLayout, _this5.layout.layoutBox, _this5.relativeParent.layout.layoutBox);\n            mixBox(_this5.relativeTarget, _this5.relativeTargetOrigin, relativeLayout, progress);\n            /**\n             * If this is an unchanged relative target we can consider the\n             * projection not dirty.\n             */\n            if (prevRelativeTarget && boxEquals(_this5.relativeTarget, prevRelativeTarget)) {\n              _this5.isProjectionDirty = false;\n            }\n            if (!prevRelativeTarget) prevRelativeTarget = createBox();\n            copyBoxInto(prevRelativeTarget, _this5.relativeTarget);\n          }\n          if (isSharedLayoutAnimation) {\n            _this5.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this5.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this5.root.scheduleUpdateProjection();\n          _this5.scheduleRender();\n          _this5.animationProgress = progress;\n        };\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this6 = this;\n        this.notifyListeners(\"animationStart\");\n        this.currentAnimation && this.currentAnimation.stop();\n        if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n          this.resumingFrom.currentAnimation.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelFrame(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = frame.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this6.currentAnimation = animateSingleValue(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              _this6.mixTargetDelta(latest);\n              options.onUpdate && options.onUpdate(latest);\n            },\n            onComplete: function onComplete() {\n              options.onComplete && options.onComplete();\n              _this6.completeAnimation();\n            }\n          }));\n          if (_this6.resumingFrom) {\n            _this6.resumingFrom.currentAnimation = _this6.currentAnimation;\n          }\n          _this6.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        var stack = this.getStack();\n        stack && stack.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        if (this.currentAnimation) {\n          this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n          target = lead.target,\n          layout = lead.layout,\n          latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        var config = node.options.initialPromotionConfig;\n        node.promote({\n          transition: config ? config.transition : undefined,\n          preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          needsReset = _ref3.needsReset,\n          transition = _ref3.transition,\n          preserveFollowOpacity = _ref3.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n        var latestValues = visualElement.latestValues;\n        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n          hasRotate = true;\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var key = \"rotate\" + transformAxes[i];\n          // Record the rotation and then temporarily set it to 0\n          if (latestValues[key]) {\n            resetValues[key] = latestValues[key];\n            visualElement.setStaticValue(key, 0);\n          }\n        }\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement.render();\n        // Put back all the values we reset\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles(styleProp) {\n        var _a, _b;\n        if (!this.instance || this.isSVG) return undefined;\n        if (!this.isVisible) {\n          return hiddenVisibility;\n        }\n        var styles = {\n          visibility: \"\"\n        };\n        var transformTemplate = this.getTransformTemplate();\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _this$projectionDelta = this.projectionDelta,\n          x = _this$projectionDelta.x,\n          y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n            correct = _scaleCorrectors$key.correct,\n            applyTo = _scaleCorrectors$key.applyTo;\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n          var corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      }\n      // Only run on root\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a;\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n      layout = _node$layout.layoutBox,\n      measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n          parentLayout = relativeParent.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    var onExitComplete = node.options.onExitComplete;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mixNumber(delta.translate, 0, p);\n  output.scale = mixNumber(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mixNumber(from.min, to.min, p);\n  output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nvar userAgentContains = function userAgentContains(string) {\n  return typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n};\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nvar roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : noop;\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEqualsRounded","isDeltaZero","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mixNumber","record","isSVGElement","animateSingleValue","clamp","cancelFrame","frameData","steps","frame","noop","time","microtask","transformAxes","hiddenVisibility","visibility","animationTarget","id","projectionFrameData","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","_ref","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","_this","latestValues","arguments","length","undefined","parent","_classCallCheck","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","hasProjected","isVisible","animationProgress","sharedNodes","root","path","concat","_toConsumableArray","depth","i","_createClass","key","value","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","apply","hasListeners","mount","instance","_this2","_this$options","layoutId","layout","visualElement","current","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","_ref2","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","_visualElement$getPro","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","_objectSpread","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","_this$options2","prevTransformTemplateValue","updateSnapshot","update","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","process","preRender","render","didUpdate","_this3","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","_this4","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","_this$options3","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","_this$options4","pendingAnimation","prevTreeScaleX","prevTreeScaleY","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","hide","show","notifyAll","_this5","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","_this6","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","_ref3","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","_this$projectionDelta","transformOrigin","origin","opacityExit","_scaleCorrectors$key","correct","applyTo","corrected","num","resetTree","clear","_node$layout","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/ChooseYouCoaching/frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}