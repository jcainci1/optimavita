{"ast":null,"code":"\"use client\";\n\n// src/useMutation.ts\nimport _objectSpread from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { noop, shouldThrowError } from \"./utils.js\";\nfunction useMutation(options, queryClient) {\n  var client = useQueryClient(queryClient);\n  var _React$useState = React.useState(function () {\n      return new MutationObserver(client, options);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    observer = _React$useState2[0];\n  React.useEffect(function () {\n    observer.setOptions(options);\n  }, [observer, options]);\n  var result = React.useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return observer.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [observer]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return _objectSpread(_objectSpread({}, result), {}, {\n    mutate: mutate,\n    mutateAsync: result.mutate\n  });\n}\nexport { useMutation };","map":{"version":3,"names":["React","MutationObserver","notifyManager","useQueryClient","noop","shouldThrowError","useMutation","options","queryClient","client","_React$useState","useState","_React$useState2","_slicedToArray","observer","useEffect","setOptions","result","useSyncExternalStore","useCallback","onStoreChange","subscribe","batchCalls","getCurrentResult","mutate","variables","mutateOptions","catch","error","throwOnError","_objectSpread","mutateAsync"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"mappings":";;;;;AACA,YAAYA,KAAA,MAAW;AACvB,SAASC,gBAAA,EAAkBC,aAAA,QAAqB;AAChD,SAASC,cAAA,QAAsB;AAC/B,SAASC,IAAA,EAAMC,gBAAA,QAAwB;AAUhC,SAASC,YAMdC,OAAA,EACAC,WAAA,EACwD;EACxD,IAAMC,MAAA,GAASN,cAAA,CAAeK,WAAW;EAEzC,IAAAE,eAAA,GAAyBV,KAAA,CAAAW,QAAA,CACvB;MAAA,OACE,IAAIV,gBAAA,CACFQ,MAAA,EACAF,OACF;IAAA,CACJ;IAAAK,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IANOI,QAAQ,GAAAF,gBAAA;EAQTZ,KAAA,CAAAe,SAAA,CAAU,YAAM;IACpBD,QAAA,CAASE,UAAA,CAAWT,OAAO;EAC7B,GAAG,CAACO,QAAA,EAAUP,OAAO,CAAC;EAEtB,IAAMU,MAAA,GAAejB,KAAA,CAAAkB,oBAAA,CACblB,KAAA,CAAAmB,WAAA,CACJ,UAACC,aAAA;IAAA,OACCN,QAAA,CAASO,SAAA,CAAUnB,aAAA,CAAcoB,UAAA,CAAWF,aAAa,CAAC;EAAA,GAC5D,CAACN,QAAQ,CACX,GACA;IAAA,OAAMA,QAAA,CAASS,gBAAA,CAAiB;EAAA,GAChC;IAAA,OAAMT,QAAA,CAASS,gBAAA,CAAiB;EAAA,CAClC;EAEA,IAAMC,MAAA,GAAexB,KAAA,CAAAmB,WAAA,CAGnB,UAACM,SAAA,EAAWC,aAAA,EAAkB;IAC5BZ,QAAA,CAASU,MAAA,CAAOC,SAAA,EAAWC,aAAa,EAAEC,KAAA,CAAMvB,IAAI;EACtD,GACA,CAACU,QAAQ,CACX;EAEA,IACEG,MAAA,CAAOW,KAAA,IACPvB,gBAAA,CAAiBS,QAAA,CAASP,OAAA,CAAQsB,YAAA,EAAc,CAACZ,MAAA,CAAOW,KAAK,CAAC,GAC9D;IACA,MAAMX,MAAA,CAAOW,KAAA;EACf;EAEA,OAAAE,aAAA,CAAAA,aAAA,KAAYb,MAAA;IAAQO,MAAA,EAAAA,MAAA;IAAQO,WAAA,EAAad,MAAA,CAAOO;EAAA;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}