{"ast":null,"code":"import _toConsumableArray from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _queryCache, _mutationCache, _defaultOptions, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline;\n// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey, resolveStaleTime, skipToken } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = (_queryCache = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _queryDefaults = /*#__PURE__*/new WeakMap(), _mutationDefaults = /*#__PURE__*/new WeakMap(), _mountCount = /*#__PURE__*/new WeakMap(), _unsubscribeFocus = /*#__PURE__*/new WeakMap(), _unsubscribeOnline = /*#__PURE__*/new WeakMap(), /*#__PURE__*/function () {\n  function QueryClient() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, QueryClient);\n    _classPrivateFieldInitSpec(this, _queryCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _defaultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _queryDefaults, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationDefaults, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mountCount, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _unsubscribeFocus, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _unsubscribeOnline, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _queryCache, config.queryCache || new QueryCache());\n    _classPrivateFieldSet(this, _mutationCache, config.mutationCache || new MutationCache());\n    _classPrivateFieldSet(this, _defaultOptions, config.defaultOptions || {});\n    _classPrivateFieldSet(this, _queryDefaults, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(this, _mutationDefaults, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(this, _mountCount, 0);\n  }\n  _createClass(QueryClient, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this$mountCount,\n        _this$mountCount2,\n        _this = this;\n      _classPrivateFieldSet(this, _mountCount, (_this$mountCount = _classPrivateFieldGet(this, _mountCount), _this$mountCount2 = _this$mountCount++, _this$mountCount)), _this$mountCount2;\n      if (_classPrivateFieldGet(this, _mountCount) !== 1) return;\n      _classPrivateFieldSet(this, _unsubscribeFocus, focusManager.subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(focused) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (!focused) {\n                  _context.next = 4;\n                  break;\n                }\n                _context.next = 3;\n                return _this.resumePausedMutations();\n              case 3:\n                _classPrivateFieldGet(_this, _queryCache).onFocus();\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      _classPrivateFieldSet(this, _unsubscribeOnline, onlineManager.subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(online) {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!online) {\n                  _context2.next = 4;\n                  break;\n                }\n                _context2.next = 3;\n                return _this.resumePausedMutations();\n              case 3:\n                _classPrivateFieldGet(_this, _queryCache).onOnline();\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _this$mountCount3, _this$mountCount4, _classPrivateFieldGet2, _classPrivateFieldGet3;\n      _classPrivateFieldSet(this, _mountCount, (_this$mountCount3 = _classPrivateFieldGet(this, _mountCount), _this$mountCount4 = _this$mountCount3--, _this$mountCount3)), _this$mountCount4;\n      if (_classPrivateFieldGet(this, _mountCount) !== 0) return;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _unsubscribeFocus)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(this, _unsubscribeFocus, void 0);\n      (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _unsubscribeOnline)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n      _classPrivateFieldSet(this, _unsubscribeOnline, void 0);\n    }\n  }, {\n    key: \"isFetching\",\n    value: function isFetching(filters) {\n      return _classPrivateFieldGet(this, _queryCache).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        fetchStatus: \"fetching\"\n      })).length;\n    }\n  }, {\n    key: \"isMutating\",\n    value: function isMutating(filters) {\n      return _classPrivateFieldGet(this, _mutationCache).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        status: \"pending\"\n      })).length;\n    }\n  }, {\n    key: \"getQueryData\",\n    value: function getQueryData(queryKey) {\n      var _classPrivateFieldGet4;\n      var options = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _queryCache).get(options.queryHash)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.state.data;\n    }\n  }, {\n    key: \"ensureQueryData\",\n    value: function ensureQueryData(options) {\n      var defaultedOptions = this.defaultQueryOptions(options);\n      var query = _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions);\n      var cachedData = query.state.data;\n      if (cachedData === void 0) {\n        return this.fetchQuery(options);\n      }\n      if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n        void this.prefetchQuery(defaultedOptions);\n      }\n      return Promise.resolve(cachedData);\n    }\n  }, {\n    key: \"getQueriesData\",\n    value: function getQueriesData(filters) {\n      return _classPrivateFieldGet(this, _queryCache).findAll(filters).map(function (_ref3) {\n        var queryKey = _ref3.queryKey,\n          state = _ref3.state;\n        var data = state.data;\n        return [queryKey, data];\n      });\n    }\n  }, {\n    key: \"setQueryData\",\n    value: function setQueryData(queryKey, updater, options) {\n      var defaultedOptions = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      var query = _classPrivateFieldGet(this, _queryCache).get(defaultedOptions.queryHash);\n      var prevData = query === null || query === void 0 ? void 0 : query.state.data;\n      var data = functionalUpdate(updater, prevData);\n      if (data === void 0) {\n        return void 0;\n      }\n      return _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions).setData(data, _objectSpread(_objectSpread({}, options), {}, {\n        manual: true\n      }));\n    }\n  }, {\n    key: \"setQueriesData\",\n    value: function setQueriesData(filters, updater, options) {\n      var _this2 = this;\n      return notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this2, _queryCache).findAll(filters).map(function (_ref4) {\n          var queryKey = _ref4.queryKey;\n          return [queryKey, _this2.setQueryData(queryKey, updater, options)];\n        });\n      });\n    }\n  }, {\n    key: \"getQueryState\",\n    value: function getQueryState(queryKey) {\n      var _classPrivateFieldGet5;\n      var options = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _queryCache).get(options.queryHash)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.state;\n    }\n  }, {\n    key: \"removeQueries\",\n    value: function removeQueries(filters) {\n      var queryCache = _classPrivateFieldGet(this, _queryCache);\n      notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          queryCache.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"resetQueries\",\n    value: function resetQueries(filters, options) {\n      var _this3 = this;\n      var queryCache = _classPrivateFieldGet(this, _queryCache);\n      var refetchFilters = _objectSpread({\n        type: \"active\"\n      }, filters);\n      return notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          query.reset();\n        });\n        return _this3.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"cancelQueries\",\n    value: function cancelQueries(filters) {\n      var _this4 = this;\n      var cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var defaultedCancelOptions = _objectSpread({\n        revert: true\n      }, cancelOptions);\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this4, _queryCache).findAll(filters).map(function (query) {\n          return query.cancel(defaultedCancelOptions);\n        });\n      });\n      return Promise.all(promises).then(noop).catch(noop);\n    }\n  }, {\n    key: \"invalidateQueries\",\n    value: function invalidateQueries(filters) {\n      var _this5 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return notifyManager.batch(function () {\n        var _ref5, _filters$refetchType;\n        _classPrivateFieldGet(_this5, _queryCache).findAll(filters).forEach(function (query) {\n          query.invalidate();\n        });\n        if ((filters === null || filters === void 0 ? void 0 : filters.refetchType) === \"none\") {\n          return Promise.resolve();\n        }\n        var refetchFilters = _objectSpread(_objectSpread({}, filters), {}, {\n          type: (_ref5 = (_filters$refetchType = filters === null || filters === void 0 ? void 0 : filters.refetchType) !== null && _filters$refetchType !== void 0 ? _filters$refetchType : filters === null || filters === void 0 ? void 0 : filters.type) !== null && _ref5 !== void 0 ? _ref5 : \"active\"\n        });\n        return _this5.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"refetchQueries\",\n    value: function refetchQueries(filters) {\n      var _options$cancelRefetc,\n        _this6 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fetchOptions = _objectSpread(_objectSpread({}, options), {}, {\n        cancelRefetch: (_options$cancelRefetc = options.cancelRefetch) !== null && _options$cancelRefetc !== void 0 ? _options$cancelRefetc : true\n      });\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this6, _queryCache).findAll(filters).filter(function (query) {\n          return !query.isDisabled();\n        }).map(function (query) {\n          var promise = query.fetch(void 0, fetchOptions);\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop);\n          }\n          return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n        });\n      });\n      return Promise.all(promises).then(noop);\n    }\n  }, {\n    key: \"fetchQuery\",\n    value: function fetchQuery(options) {\n      var defaultedOptions = this.defaultQueryOptions(options);\n      if (defaultedOptions.retry === void 0) {\n        defaultedOptions.retry = false;\n      }\n      var query = _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions);\n      return query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n  }, {\n    key: \"prefetchQuery\",\n    value: function prefetchQuery(options) {\n      return this.fetchQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"fetchInfiniteQuery\",\n    value: function fetchInfiniteQuery(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.fetchQuery(options);\n    }\n  }, {\n    key: \"prefetchInfiniteQuery\",\n    value: function prefetchInfiniteQuery(options) {\n      return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"ensureInfiniteQueryData\",\n    value: function ensureInfiniteQueryData(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.ensureQueryData(options);\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      if (onlineManager.isOnline()) {\n        return _classPrivateFieldGet(this, _mutationCache).resumePausedMutations();\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getQueryCache\",\n    value: function getQueryCache() {\n      return _classPrivateFieldGet(this, _queryCache);\n    }\n  }, {\n    key: \"getMutationCache\",\n    value: function getMutationCache() {\n      return _classPrivateFieldGet(this, _mutationCache);\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return _classPrivateFieldGet(this, _defaultOptions);\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      _classPrivateFieldSet(this, _defaultOptions, options);\n    }\n  }, {\n    key: \"setQueryDefaults\",\n    value: function setQueryDefaults(queryKey, options) {\n      _classPrivateFieldGet(this, _queryDefaults).set(hashKey(queryKey), {\n        queryKey: queryKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getQueryDefaults\",\n    value: function getQueryDefaults(queryKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(this, _queryDefaults).values());\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n          Object.assign(result, queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"setMutationDefaults\",\n    value: function setMutationDefaults(mutationKey, options) {\n      _classPrivateFieldGet(this, _mutationDefaults).set(hashKey(mutationKey), {\n        mutationKey: mutationKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getMutationDefaults\",\n    value: function getMutationDefaults(mutationKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(this, _mutationDefaults).values());\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n          result = _objectSpread(_objectSpread({}, result), queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"defaultQueryOptions\",\n    value: function defaultQueryOptions(options) {\n      if (options._defaulted) {\n        return options;\n      }\n      var defaultedOptions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions).queries), this.getQueryDefaults(options.queryKey)), options), {}, {\n        _defaulted: true\n      });\n      if (!defaultedOptions.queryHash) {\n        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n      }\n      if (defaultedOptions.refetchOnReconnect === void 0) {\n        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n      }\n      if (defaultedOptions.throwOnError === void 0) {\n        defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n      }\n      if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n        defaultedOptions.networkMode = \"offlineFirst\";\n      }\n      if (defaultedOptions.queryFn === skipToken) {\n        defaultedOptions.enabled = false;\n      }\n      return defaultedOptions;\n    }\n  }, {\n    key: \"defaultMutationOptions\",\n    value: function defaultMutationOptions(options) {\n      if (options !== null && options !== void 0 && options._defaulted) {\n        return options;\n      }\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions).mutations), (options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)), options), {}, {\n        _defaulted: true\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _queryCache).clear();\n      _classPrivateFieldGet(this, _mutationCache).clear();\n    }\n  }]);\n  return QueryClient;\n}());\nexport { QueryClient };","map":{"version":3,"names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","resolveStaleTime","skipToken","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","_queryCache","WeakMap","_mutationCache","_defaultOptions","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","config","arguments","length","undefined","_classCallCheck","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","queryCache","mutationCache","defaultOptions","Map","_createClass","key","mount","_this$mountCount","_this$mountCount2","_this","_classPrivateFieldGet","subscribe","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","focused","wrap","_callee$","_context","prev","next","resumePausedMutations","onFocus","stop","_x","apply","_ref2","_callee2","online","_callee2$","_context2","onOnline","_x2","unmount","_this$mountCount3","_this$mountCount4","_classPrivateFieldGet2","_classPrivateFieldGet3","call","isFetching","filters","findAll","_objectSpread","fetchStatus","isMutating","status","getQueryData","queryKey","_classPrivateFieldGet4","options","defaultQueryOptions","get","queryHash","state","data","ensureQueryData","defaultedOptions","query","build","cachedData","fetchQuery","revalidateIfStale","isStaleByTime","staleTime","prefetchQuery","Promise","resolve","getQueriesData","map","_ref3","setQueryData","updater","prevData","setData","manual","setQueriesData","_this2","batch","_ref4","getQueryState","_classPrivateFieldGet5","removeQueries","forEach","remove","resetQueries","_this3","refetchFilters","type","reset","refetchQueries","cancelQueries","_this4","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","_this5","_ref5","_filters$refetchType","invalidate","refetchType","_options$cancelRefetc","_this6","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","ensureInfiniteQueryData","isOnline","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","_toConsumableArray","values","result","queryDefault","Object","assign","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","refetchOnReconnect","networkMode","suspense","persister","queryFn","enabled","defaultMutationOptions","mutations","clear"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DataTag,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n  UnsetMarker,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching<\n    TQueryFilters extends QueryFilters<any, any, any, any> = QueryFilters,\n  >(filters?: TQueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating<\n    TMutationFilters extends MutationFilters<any, any> = MutationFilters,\n  >(filters?: TMutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue,\n      unknown\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n\n    return this.#queryCache.get(options.queryHash)?.state.data as\n      | TInferredQueryFnData\n      | undefined\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n    const query = this.#queryCache.build(this, defaultedOptions)\n    const cachedData = query.state.data\n\n    if (cachedData === undefined) {\n      return this.fetchQuery(options)\n    }\n\n    if (\n      options.revalidateIfStale &&\n      query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n    ) {\n      void this.prefetchQuery(defaultedOptions)\n    }\n\n    return Promise.resolve(cachedData)\n  }\n\n  getQueriesData<\n    TQueryFnData = unknown,\n    TQueryFilters extends QueryFilters<\n      any,\n      any,\n      any,\n      any\n    > = QueryFilters<TQueryFnData>,\n    TInferredQueryFnData = TQueryFilters extends QueryFilters<\n      infer TData,\n      any,\n      any,\n      any\n    >\n      ? TData\n      : TQueryFnData,\n  >(\n    filters: TQueryFilters,\n  ): Array<[QueryKey, TInferredQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TInferredQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue,\n      unknown\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<\n    TQueryFnData,\n    TQueryFilters extends QueryFilters<\n      any,\n      any,\n      any,\n      any\n    > = QueryFilters<TQueryFnData>,\n    TInferredQueryFnData = TQueryFilters extends QueryFilters<\n      infer TData,\n      any,\n      any,\n      any\n    >\n      ? TData\n      : TQueryFnData,\n  >(\n    filters: TQueryFilters,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TInferredQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TInferredQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue,\n      unknown\n    >\n      ? TaggedValue\n      : TQueryFnData,\n    TInferredError = TTaggedQueryKey extends DataTag<\n      unknown,\n      unknown,\n      infer TaggedError\n    >\n      ? TaggedError extends UnsetMarker\n        ? TError\n        : TaggedError\n      : TError,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TInferredError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TInferredError>(\n      options.queryHash,\n    )?.state\n  }\n\n  removeQueries<\n    TQueryFilters extends QueryFilters<any, any, any, any> = QueryFilters,\n  >(filters?: TQueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<\n    TQueryFilters extends QueryFilters<any, any, any, any> = QueryFilters,\n  >(filters?: TQueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries<\n    TQueryFilters extends QueryFilters<any, any, any, any> = QueryFilters,\n  >(filters?: TQueryFilters, cancelOptions: CancelOptions = {}): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<\n    TInvalidateQueryFilters extends InvalidateQueryFilters<\n      any,\n      any,\n      any,\n      any\n    > = InvalidateQueryFilters,\n  >(\n    filters?: TInvalidateQueryFilters,\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters?.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters?.refetchType ?? filters?.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<\n    TRefetchQueryFilters extends RefetchQueryFilters<\n      any,\n      any,\n      any,\n      any\n    > = RefetchQueryFilters,\n  >(\n    filters?: TRefetchQueryFilters,\n    options: RefetchOptions = {},\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    const result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,SACEA,gBAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,IAAA,EACAC,eAAA,EACAC,gBAAA,EACAC,SAAA,QACK;AACP,SAASC,UAAA,QAAkB;AAC3B,SAASC,aAAA,QAAqB;AAC9B,SAASC,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAAqB;AAC9B,SAASC,aAAA,QAAqB;AAC9B,SAASC,qBAAA,QAA6B;AA8C/B,IAAMC,WAAA,IAAAC,WAAA,oBAAAC,OAAA,IAAAC,cAAA,oBAAAD,OAAA,IAAAE,eAAA,oBAAAF,OAAA,IAAAG,cAAA,oBAAAH,OAAA,IAAAI,iBAAA,oBAAAJ,OAAA,IAAAK,WAAA,oBAAAL,OAAA,IAAAM,iBAAA,oBAAAN,OAAA,IAAAO,kBAAA,oBAAAP,OAAA;EAUX,SAAAF,YAAA,EAA4C;IAAA,IAAhCU,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;IAAAG,eAAA,OAAAd,WAAA;IAAAe,0BAAA,OAAAd,WAAA;MAAAe,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAZ,cAAA;MAAAa,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAX,eAAA;MAAAY,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAV,cAAA;MAAAW,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAT,iBAAA;MAAAU,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAR,WAAA;MAAAS,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAP,iBAAA;MAAAQ,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAN,kBAAA;MAAAO,QAAA;MAAAC,KAAA;IAAA;IACvCC,qBAAA,OAAAjB,WAAA,EAAmBS,MAAA,CAAOS,UAAA,IAAc,IAAIzB,UAAA,CAAW;IACvDwB,qBAAA,OAAAf,cAAA,EAAsBO,MAAA,CAAOU,aAAA,IAAiB,IAAIzB,aAAA,CAAc;IAChEuB,qBAAA,OAAAd,eAAA,EAAuBM,MAAA,CAAOW,cAAA,IAAkB,CAAC;IACjDH,qBAAA,OAAAb,cAAA,EAAsB,mBAAIiB,GAAA,CAAI;IAC9BJ,qBAAA,OAAAZ,iBAAA,EAAyB,mBAAIgB,GAAA,CAAI;IACjCJ,qBAAA,OAAAX,WAAA,EAAmB;EACrB;EAAAgB,YAAA,CAAAvB,WAAA;IAAAwB,GAAA;IAAAP,KAAA,EAEA,SAAAQ,MAAA,EAAc;MAAA,IAAAC,gBAAA;QAAAC,iBAAA;QAAAC,KAAA;MACZV,qBAAA,OAAAX,WAAA,GAAAmB,gBAAA,GAAAG,qBAAA,OAAAtB,WAAA,GAAAoB,iBAAA,GAAAD,gBAAA,IAAAA,gBAAA,IAAAC,iBAAA;MACA,IAAIE,qBAAA,OAAAtB,WAAA,MAAqB,GAAG;MAE5BW,qBAAA,OAAAV,iBAAA,EAAyBZ,YAAA,CAAakC,SAAA;QAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAU,SAAAC,QAAOC,OAAA;UAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAA,KACjDL,OAAA;kBAAAG,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAAF,QAAA,CAAAE,IAAA;gBAAA,OACIb,KAAA,CAAKc,qBAAA,CAAsB;cAAA;gBACjCb,qBAAA,CAAAD,KAAA,EAAA3B,WAAA,EAAiB0C,OAAA,CAAQ;cAAA;cAAA;gBAAA,OAAAJ,QAAA,CAAAK,IAAA;YAAA;UAAA,GAAAT,OAAA;QAAA,CAE5B;QAAA,iBAAAU,EAAA;UAAA,OAAAd,IAAA,CAAAe,KAAA,OAAAnC,SAAA;QAAA;MAAA;MACDO,qBAAA,OAAAT,kBAAA,EAA0BZ,aAAA,CAAciC,SAAA;QAAA,IAAAiB,KAAA,GAAAf,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAU,SAAAc,SAAOC,MAAA;UAAA,OAAAhB,mBAAA,GAAAI,IAAA,UAAAa,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAX,IAAA,GAAAW,SAAA,CAAAV,IAAA;cAAA;gBAAA,KACnDQ,MAAA;kBAAAE,SAAA,CAAAV,IAAA;kBAAA;gBAAA;gBAAAU,SAAA,CAAAV,IAAA;gBAAA,OACIb,KAAA,CAAKc,qBAAA,CAAsB;cAAA;gBACjCb,qBAAA,CAAAD,KAAA,EAAA3B,WAAA,EAAiBmD,QAAA,CAAS;cAAA;cAAA;gBAAA,OAAAD,SAAA,CAAAP,IAAA;YAAA;UAAA,GAAAI,QAAA;QAAA,CAE7B;QAAA,iBAAAK,GAAA;UAAA,OAAAN,KAAA,CAAAD,KAAA,OAAAnC,SAAA;QAAA;MAAA;IACH;EAAA;IAAAa,GAAA;IAAAP,KAAA,EAEA,SAAAqC,QAAA,EAAgB;MAAA,IAAAC,iBAAA,EAAAC,iBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACdxC,qBAAA,OAAAX,WAAA,GAAAgD,iBAAA,GAAA1B,qBAAA,OAAAtB,WAAA,GAAAiD,iBAAA,GAAAD,iBAAA,IAAAA,iBAAA,IAAAC,iBAAA;MACA,IAAI3B,qBAAA,OAAAtB,WAAA,MAAqB,GAAG;MAE5B,CAAAkD,sBAAA,GAAA5B,qBAAA,OAAArB,iBAAA,eAAAiD,sBAAA,eAAAA,sBAAA,CAAAE,IAAA;MACAzC,qBAAA,OAAAV,iBAAA,EAAyB;MAEzB,CAAAkD,sBAAA,GAAA7B,qBAAA,OAAApB,kBAAA,eAAAiD,sBAAA,eAAAA,sBAAA,CAAAC,IAAA;MACAzC,qBAAA,OAAAT,kBAAA,EAA0B;IAC5B;EAAA;IAAAe,GAAA;IAAAP,KAAA,EAEA,SAAA2C,WAEEC,OAAA,EAAiC;MACjC,OAAOhC,qBAAA,OAAA5B,WAAA,EAAiB6D,OAAA,CAAAC,aAAA,CAAAA,aAAA,KAAaF,OAAA;QAASG,WAAA,EAAa;MAAA,EAAY,EACpEpD,MAAA;IACL;EAAA;IAAAY,GAAA;IAAAP,KAAA,EAEA,SAAAgD,WAEEJ,OAAA,EAAoC;MACpC,OAAOhC,qBAAA,OAAA1B,cAAA,EAAoB2D,OAAA,CAAAC,aAAA,CAAAA,aAAA,KAAaF,OAAA;QAASK,MAAA,EAAQ;MAAA,EAAW,EAAEtD,MAAA;IACxE;EAAA;IAAAY,GAAA;IAAAP,KAAA,EAEA,SAAAkD,aAUEC,QAAA,EAA6D;MAAA,IAAAC,sBAAA;MAC7D,IAAMC,OAAA,GAAU,KAAKC,mBAAA,CAAoB;QAAEH,QAAA,EAAAA;MAAS,CAAC;MAErD,QAAAC,sBAAA,GAAOxC,qBAAA,OAAA5B,WAAA,EAAiBuE,GAAA,CAAIF,OAAA,CAAQG,SAAS,eAAAJ,sBAAA,uBAAtCA,sBAAA,CAAyCK,KAAA,CAAMC,IAAA;IAGxD;EAAA;IAAAnD,GAAA;IAAAP,KAAA,EAEA,SAAA2D,gBAMEN,OAAA,EACgB;MAChB,IAAMO,gBAAA,GAAmB,KAAKN,mBAAA,CAAoBD,OAAO;MACzD,IAAMQ,KAAA,GAAQjD,qBAAA,OAAA5B,WAAA,EAAiB8E,KAAA,CAAM,MAAMF,gBAAgB;MAC3D,IAAMG,UAAA,GAAaF,KAAA,CAAMJ,KAAA,CAAMC,IAAA;MAE/B,IAAIK,UAAA,KAAe,QAAW;QAC5B,OAAO,KAAKC,UAAA,CAAWX,OAAO;MAChC;MAEA,IACEA,OAAA,CAAQY,iBAAA,IACRJ,KAAA,CAAMK,aAAA,CAAc3F,gBAAA,CAAiBqF,gBAAA,CAAiBO,SAAA,EAAWN,KAAK,CAAC,GACvE;QACA,KAAK,KAAKO,aAAA,CAAcR,gBAAgB;MAC1C;MAEA,OAAOS,OAAA,CAAQC,OAAA,CAAQP,UAAU;IACnC;EAAA;IAAAxD,GAAA;IAAAP,KAAA,EAEA,SAAAuE,eAiBE3B,OAAA,EACqD;MACrD,OAAOhC,qBAAA,OAAA5B,WAAA,EAAiB6D,OAAA,CAAQD,OAAO,EAAE4B,GAAA,CAAI,UAAAC,KAAA,EAAyB;QAAA,IAAtBtB,QAAA,GAAAsB,KAAA,CAAAtB,QAAA;UAAUM,KAAA,GAAAgB,KAAA,CAAAhB,KAAA;QACxD,IAAMC,IAAA,GAAOD,KAAA,CAAMC,IAAA;QACnB,OAAO,CAACP,QAAA,EAAUO,IAAI;MACxB,CAAC;IACH;EAAA;IAAAnD,GAAA;IAAAP,KAAA,EAEA,SAAA0E,aAWEvB,QAAA,EACAwB,OAAA,EAIAtB,OAAA,EACkC;MAClC,IAAMO,gBAAA,GAAmB,KAAKN,mBAAA,CAM5B;QAAEH,QAAA,EAAAA;MAAS,CAAC;MAEd,IAAMU,KAAA,GAAQjD,qBAAA,OAAA5B,WAAA,EAAiBuE,GAAA,CAC7BK,gBAAA,CAAiBJ,SACnB;MACA,IAAMoB,QAAA,GAAWf,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOJ,KAAA,CAAMC,IAAA;MAC9B,IAAMA,IAAA,GAAOxF,gBAAA,CAAiByG,OAAA,EAASC,QAAQ;MAE/C,IAAIlB,IAAA,KAAS,QAAW;QACtB,OAAO;MACT;MAEA,OAAO9C,qBAAA,OAAA5B,WAAA,EACJ8E,KAAA,CAAM,MAAMF,gBAAgB,EAC5BiB,OAAA,CAAQnB,IAAA,EAAAZ,aAAA,CAAAA,aAAA,KAAWO,OAAA;QAASyB,MAAA,EAAQ;MAAA,EAAM;IAC/C;EAAA;IAAAvE,GAAA;IAAAP,KAAA,EAEA,SAAA+E,eAiBEnC,OAAA,EACA+B,OAAA,EAIAtB,OAAA,EACqD;MAAA,IAAA2B,MAAA;MACrD,OAAOnG,aAAA,CAAcoG,KAAA,CAAM;QAAA,OACzBrE,qBAAA,CAAAoE,MAAA,EAAAhG,WAAA,EACG6D,OAAA,CAAQD,OAAO,EACf4B,GAAA,CAAI,UAAAU,KAAA;UAAA,IAAG/B,QAAA,GAAA+B,KAAA,CAAA/B,QAAA;UAAA,OAAe,CACrBA,QAAA,EACA6B,MAAA,CAAKN,YAAA,CAAmCvB,QAAA,EAAUwB,OAAA,EAAStB,OAAO,EACnE;QAAA;MAAA,CACL;IACF;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAAmF,cAqBEhC,QAAA,EAC8D;MAAA,IAAAiC,sBAAA;MAC9D,IAAM/B,OAAA,GAAU,KAAKC,mBAAA,CAAoB;QAAEH,QAAA,EAAAA;MAAS,CAAC;MACrD,QAAAiC,sBAAA,GAAOxE,qBAAA,OAAA5B,WAAA,EAAiBuE,GAAA,CACtBF,OAAA,CAAQG,SACV,eAAA4B,sBAAA,uBAFOA,sBAAA,CAEJ3B,KAAA;IACL;EAAA;IAAAlD,GAAA;IAAAP,KAAA,EAEA,SAAAqF,cAEEzC,OAAA,EAA+B;MAC/B,IAAM1C,UAAA,GAAAU,qBAAA,CAAa,MAAA5B,WAAA,CAAK;MACxBH,aAAA,CAAcoG,KAAA,CAAM,YAAM;QACxB/E,UAAA,CAAW2C,OAAA,CAAQD,OAAO,EAAE0C,OAAA,CAAQ,UAACzB,KAAA,EAAU;UAC7C3D,UAAA,CAAWqF,MAAA,CAAO1B,KAAK;QACzB,CAAC;MACH,CAAC;IACH;EAAA;IAAAtD,GAAA;IAAAP,KAAA,EAEA,SAAAwF,aAEE5C,OAAA,EAAyBS,OAAA,EAAuC;MAAA,IAAAoC,MAAA;MAChE,IAAMvF,UAAA,GAAAU,qBAAA,CAAa,MAAA5B,WAAA,CAAK;MAExB,IAAM0G,cAAA,GAAA5C,aAAA;QACJ6C,IAAA,EAAM;MAAA,GACH/C,OAAA,CACL;MAEA,OAAO/D,aAAA,CAAcoG,KAAA,CAAM,YAAM;QAC/B/E,UAAA,CAAW2C,OAAA,CAAQD,OAAO,EAAE0C,OAAA,CAAQ,UAACzB,KAAA,EAAU;UAC7CA,KAAA,CAAM+B,KAAA,CAAM;QACd,CAAC;QACD,OAAOH,MAAA,CAAKI,cAAA,CAAeH,cAAA,EAAgBrC,OAAO;MACpD,CAAC;IACH;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAA8F,cAEElD,OAAA,EAA2E;MAAA,IAAAmD,MAAA;MAAA,IAAlDC,aAAA,GAAAtG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;MACzD,IAAMuG,sBAAA,GAAAnD,aAAA;QAA2BoD,MAAA,EAAQ;MAAA,GAASF,aAAA,CAAc;MAEhE,IAAMG,QAAA,GAAWtH,aAAA,CAAcoG,KAAA,CAAM;QAAA,OACnCrE,qBAAA,CAAAmF,MAAA,EAAA/G,WAAA,EACG6D,OAAA,CAAQD,OAAO,EACf4B,GAAA,CAAI,UAACX,KAAA;UAAA,OAAUA,KAAA,CAAMuC,MAAA,CAAOH,sBAAsB,CAAC;QAAA;MAAA,CACxD;MAEA,OAAO5B,OAAA,CAAQgC,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAKjI,IAAI,EAAEkI,KAAA,CAAMlI,IAAI;IACpD;EAAA;IAAAkC,GAAA;IAAAP,KAAA,EAEA,SAAAwG,kBAQE5D,OAAA,EAEe;MAAA,IAAA6D,MAAA;MAAA,IADfpD,OAAA,GAAA3D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,CAAC;MAE9B,OAAOb,aAAA,CAAcoG,KAAA,CAAM,YAAM;QAAA,IAAAyB,KAAA,EAAAC,oBAAA;QAC/B/F,qBAAA,CAAA6F,MAAA,EAAAzH,WAAA,EAAiB6D,OAAA,CAAQD,OAAO,EAAE0C,OAAA,CAAQ,UAACzB,KAAA,EAAU;UACnDA,KAAA,CAAM+C,UAAA,CAAW;QACnB,CAAC;QAED,IAAI,CAAAhE,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASiE,WAAA,MAAgB,QAAQ;UACnC,OAAOxC,OAAA,CAAQC,OAAA,CAAQ;QACzB;QACA,IAAMoB,cAAA,GAAA5C,aAAA,CAAAA,aAAA,KACDF,OAAA;UACH+C,IAAA,GAAAe,KAAA,IAAAC,oBAAA,GAAM/D,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASiE,WAAA,cAAAF,oBAAA,cAAAA,oBAAA,GAAe/D,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAAS+C,IAAA,cAAAe,KAAA,cAAAA,KAAA,GAAQ;QAAA,EACjD;QACA,OAAOD,MAAA,CAAKZ,cAAA,CAAeH,cAAA,EAAgBrC,OAAO;MACpD,CAAC;IACH;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAA6F,eAQEjD,OAAA,EAEe;MAAA,IAAAkE,qBAAA;QAAAC,MAAA;MAAA,IADf1D,OAAA,GAAA3D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,CAAC;MAE3B,IAAMsH,YAAA,GAAAlE,aAAA,CAAAA,aAAA,KACDO,OAAA;QACH4D,aAAA,GAAAH,qBAAA,GAAezD,OAAA,CAAQ4D,aAAA,cAAAH,qBAAA,cAAAA,qBAAA,GAAiB;MAAA,EAC1C;MACA,IAAMX,QAAA,GAAWtH,aAAA,CAAcoG,KAAA,CAAM;QAAA,OACnCrE,qBAAA,CAAAmG,MAAA,EAAA/H,WAAA,EACG6D,OAAA,CAAQD,OAAO,EACfsE,MAAA,CAAO,UAACrD,KAAA;UAAA,OAAU,CAACA,KAAA,CAAMsD,UAAA,CAAW,CAAC;QAAA,GACrC3C,GAAA,CAAI,UAACX,KAAA,EAAU;UACd,IAAIuD,OAAA,GAAUvD,KAAA,CAAMwD,KAAA,CAAM,QAAWL,YAAY;UACjD,IAAI,CAACA,YAAA,CAAaM,YAAA,EAAc;YAC9BF,OAAA,GAAUA,OAAA,CAAQb,KAAA,CAAMlI,IAAI;UAC9B;UACA,OAAOwF,KAAA,CAAMJ,KAAA,CAAMV,WAAA,KAAgB,WAC/BsB,OAAA,CAAQC,OAAA,CAAQ,IAChB8C,OAAA;QACN,CAAC;MAAA,CACL;MAEA,OAAO/C,OAAA,CAAQgC,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAKjI,IAAI;IACxC;EAAA;IAAAkC,GAAA;IAAAP,KAAA,EAEA,SAAAgE,WAOEX,OAAA,EAOgB;MAChB,IAAMO,gBAAA,GAAmB,KAAKN,mBAAA,CAAoBD,OAAO;MAGzD,IAAIO,gBAAA,CAAiB2D,KAAA,KAAU,QAAW;QACxC3D,gBAAA,CAAiB2D,KAAA,GAAQ;MAC3B;MAEA,IAAM1D,KAAA,GAAQjD,qBAAA,OAAA5B,WAAA,EAAiB8E,KAAA,CAAM,MAAMF,gBAAgB;MAE3D,OAAOC,KAAA,CAAMK,aAAA,CACX3F,gBAAA,CAAiBqF,gBAAA,CAAiBO,SAAA,EAAWN,KAAK,CACpD,IACIA,KAAA,CAAMwD,KAAA,CAAMzD,gBAAgB,IAC5BS,OAAA,CAAQC,OAAA,CAAQT,KAAA,CAAMJ,KAAA,CAAMC,IAAa;IAC/C;EAAA;IAAAnD,GAAA;IAAAP,KAAA,EAEA,SAAAoE,cAMEf,OAAA,EACe;MACf,OAAO,KAAKW,UAAA,CAAWX,OAAO,EAAEiD,IAAA,CAAKjI,IAAI,EAAEkI,KAAA,CAAMlI,IAAI;IACvD;EAAA;IAAAkC,GAAA;IAAAP,KAAA,EAEA,SAAAwH,mBAOEnE,OAAA,EAO0C;MAC1CA,OAAA,CAAQoE,QAAA,GAAW3I,qBAAA,CAKjBuE,OAAA,CAAQqE,KAAK;MACf,OAAO,KAAK1D,UAAA,CAAWX,OAAc;IACvC;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAA2H,sBAOEtE,OAAA,EAOe;MACf,OAAO,KAAKmE,kBAAA,CAAmBnE,OAAO,EAAEiD,IAAA,CAAKjI,IAAI,EAAEkI,KAAA,CAAMlI,IAAI;IAC/D;EAAA;IAAAkC,GAAA;IAAAP,KAAA,EAEA,SAAA4H,wBAOEvE,OAAA,EAO0C;MAC1CA,OAAA,CAAQoE,QAAA,GAAW3I,qBAAA,CAKjBuE,OAAA,CAAQqE,KAAK;MAEf,OAAO,KAAK/D,eAAA,CAAgBN,OAAc;IAC5C;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAAyB,sBAAA,EAA0C;MACxC,IAAI7C,aAAA,CAAciJ,QAAA,CAAS,GAAG;QAC5B,OAAOjH,qBAAA,OAAA1B,cAAA,EAAoBuC,qBAAA,CAAsB;MACnD;MACA,OAAO4C,OAAA,CAAQC,OAAA,CAAQ;IACzB;EAAA;IAAA/D,GAAA;IAAAP,KAAA,EAEA,SAAA8H,cAAA,EAA4B;MAC1B,OAAAlH,qBAAA,CAAO,MAAA5B,WAAA;IACT;EAAA;IAAAuB,GAAA;IAAAP,KAAA,EAEA,SAAA+H,iBAAA,EAAkC;MAChC,OAAAnH,qBAAA,CAAO,MAAA1B,cAAA;IACT;EAAA;IAAAqB,GAAA;IAAAP,KAAA,EAEA,SAAAgI,kBAAA,EAAoC;MAClC,OAAApH,qBAAA,CAAO,MAAAzB,eAAA;IACT;EAAA;IAAAoB,GAAA;IAAAP,KAAA,EAEA,SAAAiI,kBAAkB5E,OAAA,EAA+B;MAC/CpD,qBAAA,OAAAd,eAAA,EAAuBkE,OAAA;IACzB;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAAkI,iBAME/E,QAAA,EACAE,OAAA,EAMM;MACNzC,qBAAA,OAAAxB,cAAA,EAAoB+I,GAAA,CAAIhK,OAAA,CAAQgF,QAAQ,GAAG;QACzCA,QAAA,EAAAA,QAAA;QACA/C,cAAA,EAAgBiD;MAClB,CAAC;IACH;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAAoI,iBACEjF,QAAA,EACsE;MACtE,IAAMkF,QAAA,GAAAC,kBAAA,CAAe1H,qBAAA,OAAAxB,cAAA,EAAoBmJ,MAAA,CAAO,CAAC;MAEjD,IAAMC,MAAA,GAGF,CAAC;MAELH,QAAA,CAAS/C,OAAA,CAAQ,UAACmD,YAAA,EAAiB;QACjC,IAAInK,eAAA,CAAgB6E,QAAA,EAAUsF,YAAA,CAAatF,QAAQ,GAAG;UACpDuF,MAAA,CAAOC,MAAA,CAAOH,MAAA,EAAQC,YAAA,CAAarI,cAAc;QACnD;MACF,CAAC;MACD,OAAOoI,MAAA;IACT;EAAA;IAAAjI,GAAA;IAAAP,KAAA,EAEA,SAAA4I,oBAMEC,WAAA,EACAxF,OAAA,EAIM;MACNzC,qBAAA,OAAAvB,iBAAA,EAAuB8I,GAAA,CAAIhK,OAAA,CAAQ0K,WAAW,GAAG;QAC/CA,WAAA,EAAAA,WAAA;QACAzI,cAAA,EAAgBiD;MAClB,CAAC;IACH;EAAA;IAAA9C,GAAA;IAAAP,KAAA,EAEA,SAAA8I,oBACED,WAAA,EAC6C;MAC7C,IAAMR,QAAA,GAAAC,kBAAA,CAAe1H,qBAAA,OAAAvB,iBAAA,EAAuBkJ,MAAA,CAAO,CAAC;MAEpD,IAAIC,MAAA,GAAsD,CAAC;MAE3DH,QAAA,CAAS/C,OAAA,CAAQ,UAACmD,YAAA,EAAiB;QACjC,IAAInK,eAAA,CAAgBuK,WAAA,EAAaJ,YAAA,CAAaI,WAAW,GAAG;UAC1DL,MAAA,GAAA1F,aAAA,CAAAA,aAAA,KAAc0F,MAAA,GAAWC,YAAA,CAAarI,cAAA,CAAe;QACvD;MACF,CAAC;MAED,OAAOoI,MAAA;IACT;EAAA;IAAAjI,GAAA;IAAAP,KAAA,EAEA,SAAAsD,oBAQED,OAAA,EAsBA;MACA,IAAIA,OAAA,CAAQ0F,UAAA,EAAY;QACtB,OAAO1F,OAAA;MAOT;MAEA,IAAMO,gBAAA,GAAAd,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACDlC,qBAAA,OAAAzB,eAAA,EAAqB6J,OAAA,GACrB,KAAKZ,gBAAA,CAAiB/E,OAAA,CAAQF,QAAQ,IACtCE,OAAA;QACH0F,UAAA,EAAY;MAAA,EACd;MAEA,IAAI,CAACnF,gBAAA,CAAiBJ,SAAA,EAAW;QAC/BI,gBAAA,CAAiBJ,SAAA,GAAYpF,qBAAA,CAC3BwF,gBAAA,CAAiBT,QAAA,EACjBS,gBACF;MACF;MAGA,IAAIA,gBAAA,CAAiBqF,kBAAA,KAAuB,QAAW;QACrDrF,gBAAA,CAAiBqF,kBAAA,GACfrF,gBAAA,CAAiBsF,WAAA,KAAgB;MACrC;MACA,IAAItF,gBAAA,CAAiB0D,YAAA,KAAiB,QAAW;QAC/C1D,gBAAA,CAAiB0D,YAAA,GAAe,CAAC,CAAC1D,gBAAA,CAAiBuF,QAAA;MACrD;MAEA,IAAI,CAACvF,gBAAA,CAAiBsF,WAAA,IAAetF,gBAAA,CAAiBwF,SAAA,EAAW;QAC/DxF,gBAAA,CAAiBsF,WAAA,GAAc;MACjC;MAEA,IAAItF,gBAAA,CAAiByF,OAAA,KAAY7K,SAAA,EAAW;QAC1CoF,gBAAA,CAAiB0F,OAAA,GAAU;MAC7B;MAEA,OAAO1F,gBAAA;IAOT;EAAA;IAAArD,GAAA;IAAAP,KAAA,EAEA,SAAAuJ,uBACElG,OAAA,EACG;MACH,IAAIA,OAAA,aAAAA,OAAA,eAAAA,OAAA,CAAS0F,UAAA,EAAY;QACvB,OAAO1F,OAAA;MACT;MACA,OAAAP,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACKlC,qBAAA,OAAAzB,eAAA,EAAqBqK,SAAA,GACpB,CAAAnG,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASwF,WAAA,KACX,KAAKC,mBAAA,CAAoBzF,OAAA,CAAQwF,WAAW,IAC3CxF,OAAA;QACH0F,UAAA,EAAY;MAAA;IAEhB;EAAA;IAAAxI,GAAA;IAAAP,KAAA,EAEA,SAAAyJ,MAAA,EAAc;MACZ7I,qBAAA,OAAA5B,WAAA,EAAiByK,KAAA,CAAM;MACvB7I,qBAAA,OAAA1B,cAAA,EAAoBuK,KAAA,CAAM;IAC5B;EAAA;EAAA,OAAA1K,WAAA;AAAA,IACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}