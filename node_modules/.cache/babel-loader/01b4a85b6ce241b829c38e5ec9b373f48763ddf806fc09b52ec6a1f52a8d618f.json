{"ast":null,"code":"import _objectSpread from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _initialState, _revertState, _cache, _retryer, _defaultOptions, _abortSignalConsumed, _dispatch;\n// src/query.ts\nimport { ensureQueryFn, noop, replaceData, resolveEnabled, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = (_initialState = /*#__PURE__*/new WeakMap(), _revertState = /*#__PURE__*/new WeakMap(), _cache = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _abortSignalConsumed = /*#__PURE__*/new WeakMap(), _dispatch = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Removable) {\n  _inherits(Query, _Removable);\n  var _super = _createSuper(Query);\n  function Query(config) {\n    var _config$state;\n    var _this;\n    _classCallCheck(this, Query);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _dispatch);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _initialState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _revertState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _cache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _retryer, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _defaultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _abortSignalConsumed, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _abortSignalConsumed, false);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _defaultOptions, config.defaultOptions);\n    _this.setOptions(config.options);\n    _this.observers = [];\n    _classPrivateFieldSet(_assertThisInitialized(_this), _cache, config.cache);\n    _this.queryKey = config.queryKey;\n    _this.queryHash = config.queryHash;\n    _classPrivateFieldSet(_assertThisInitialized(_this), _initialState, getDefaultState(_this.options));\n    _this.state = (_config$state = config.state) !== null && _config$state !== void 0 ? _config$state : _classPrivateFieldGet(_assertThisInitialized(_this), _initialState);\n    _this.scheduleGc();\n    return _this;\n  }\n  _createClass(Query, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"promise\",\n    get: function get() {\n      var _classPrivateFieldGet2;\n      return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.promise;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions)), options);\n      this.updateGcTime(this.options.gcTime);\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n        _classPrivateFieldGet(this, _cache).remove(this);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newData, options) {\n      var data = replaceData(this.state.data, newData, this.options);\n      _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n        data: data,\n        type: \"success\",\n        dataUpdatedAt: options === null || options === void 0 ? void 0 : options.updatedAt,\n        manual: options === null || options === void 0 ? void 0 : options.manual\n      });\n      return data;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state, setStateOptions) {\n      _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n        type: \"setState\",\n        state: state,\n        setStateOptions: setStateOptions\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(options) {\n      var _classPrivateFieldGet3, _classPrivateFieldGet4;\n      var promise = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.promise;\n      (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet4 === void 0 || _classPrivateFieldGet4.cancel(options);\n      return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(Query.prototype), \"destroy\", this).call(this);\n      this.cancel({\n        silent: true\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.destroy();\n      this.setState(_classPrivateFieldGet(this, _initialState));\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      var _this2 = this;\n      return this.observers.some(function (observer) {\n        return resolveEnabled(observer.options.enabled, _this2) !== false;\n      });\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      if (this.getObserversCount() > 0) {\n        return !this.isActive();\n      }\n      return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n    }\n  }, {\n    key: \"isStale\",\n    value: function isStale() {\n      if (this.state.isInvalidated) {\n        return true;\n      }\n      if (this.getObserversCount() > 0) {\n        return this.observers.some(function (observer) {\n          return observer.getCurrentResult().isStale;\n        });\n      }\n      return this.state.data === void 0;\n    }\n  }, {\n    key: \"isStaleByTime\",\n    value: function isStaleByTime() {\n      var staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _classPrivateFieldGet5;\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnWindowFocus();\n      });\n      observer === null || observer === void 0 || observer.refetch({\n        cancelRefetch: false\n      });\n      (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet5 === void 0 || _classPrivateFieldGet5.continue();\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _classPrivateFieldGet6;\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnReconnect();\n      });\n      observer === null || observer === void 0 || observer.refetch({\n        cancelRefetch: false\n      });\n      (_classPrivateFieldGet6 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet6 === void 0 || _classPrivateFieldGet6.continue();\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!this.observers.includes(observer)) {\n        this.observers.push(observer);\n        this.clearGcTimeout();\n        _classPrivateFieldGet(this, _cache).notify({\n          type: \"observerAdded\",\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      if (this.observers.includes(observer)) {\n        this.observers = this.observers.filter(function (x) {\n          return x !== observer;\n        });\n        if (!this.observers.length) {\n          if (_classPrivateFieldGet(this, _retryer)) {\n            if (_classPrivateFieldGet(this, _abortSignalConsumed)) {\n              _classPrivateFieldGet(this, _retryer).cancel({\n                revert: true\n              });\n            } else {\n              _classPrivateFieldGet(this, _retryer).cancelRetry();\n            }\n          }\n          this.scheduleGc();\n        }\n        _classPrivateFieldGet(this, _cache).notify({\n          type: \"observerRemoved\",\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"getObserversCount\",\n    value: function getObserversCount() {\n      return this.observers.length;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!this.state.isInvalidated) {\n        _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n          type: \"invalidate\"\n        });\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(options, fetchOptions) {\n      var _this3 = this,\n        _this$options$behavio,\n        _context$fetchOptions;\n      if (this.state.fetchStatus !== \"idle\") {\n        if (this.state.data !== void 0 && fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.cancelRefetch) {\n          this.cancel({\n            silent: true\n          });\n        } else if (_classPrivateFieldGet(this, _retryer)) {\n          _classPrivateFieldGet(this, _retryer).continueRetry();\n          return _classPrivateFieldGet(this, _retryer).promise;\n        }\n      }\n      if (options) {\n        this.setOptions(options);\n      }\n      if (!this.options.queryFn) {\n        var observer = this.observers.find(function (x) {\n          return x.options.queryFn;\n        });\n        if (observer) {\n          this.setOptions(observer.options);\n        }\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (!Array.isArray(this.options.queryKey)) {\n          console.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n        }\n      }\n      var abortController = new AbortController();\n      var addSignalProperty = function addSignalProperty(object) {\n        Object.defineProperty(object, \"signal\", {\n          enumerable: true,\n          get: function get() {\n            _classPrivateFieldSet(_this3, _abortSignalConsumed, true);\n            return abortController.signal;\n          }\n        });\n      };\n      var fetchFn = function fetchFn() {\n        var queryFn = ensureQueryFn(_this3.options, fetchOptions);\n        var queryFnContext = {\n          queryKey: _this3.queryKey,\n          meta: _this3.meta\n        };\n        addSignalProperty(queryFnContext);\n        _classPrivateFieldSet(_this3, _abortSignalConsumed, false);\n        if (_this3.options.persister) {\n          return _this3.options.persister(queryFn, queryFnContext, _this3);\n        }\n        return queryFn(queryFnContext);\n      };\n      var context = {\n        fetchOptions: fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        state: this.state,\n        fetchFn: fetchFn\n      };\n      addSignalProperty(context);\n      (_this$options$behavio = this.options.behavior) === null || _this$options$behavio === void 0 || _this$options$behavio.onFetch(context, this);\n      _classPrivateFieldSet(this, _revertState, this.state);\n      if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) === null || _context$fetchOptions === void 0 ? void 0 : _context$fetchOptions.meta)) {\n        var _context$fetchOptions2;\n        _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n          type: \"fetch\",\n          meta: (_context$fetchOptions2 = context.fetchOptions) === null || _context$fetchOptions2 === void 0 ? void 0 : _context$fetchOptions2.meta\n        });\n      }\n      var onError = function onError(error) {\n        if (!(isCancelledError(error) && error.silent)) {\n          _classPrivateMethodGet(_this3, _dispatch, _dispatch2).call(_this3, {\n            type: \"error\",\n            error: error\n          });\n        }\n        if (!isCancelledError(error)) {\n          var _classPrivateFieldGet7, _classPrivateFieldGet8, _classPrivateFieldGet9, _classPrivateFieldGet10;\n          (_classPrivateFieldGet7 = (_classPrivateFieldGet8 = _classPrivateFieldGet(_this3, _cache).config).onError) === null || _classPrivateFieldGet7 === void 0 || _classPrivateFieldGet7.call(_classPrivateFieldGet8, error, _this3);\n          (_classPrivateFieldGet9 = (_classPrivateFieldGet10 = _classPrivateFieldGet(_this3, _cache).config).onSettled) === null || _classPrivateFieldGet9 === void 0 || _classPrivateFieldGet9.call(_classPrivateFieldGet10, _this3.state.data, error, _this3);\n        }\n        _this3.scheduleGc();\n      };\n      _classPrivateFieldSet(this, _retryer, createRetryer({\n        initialPromise: fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.initialPromise,\n        fn: context.fetchFn,\n        abort: abortController.abort.bind(abortController),\n        onSuccess: function onSuccess(data) {\n          var _classPrivateFieldGet11, _classPrivateFieldGet12, _classPrivateFieldGet13, _classPrivateFieldGet14;\n          if (data === void 0) {\n            if (process.env.NODE_ENV !== \"production\") {\n              console.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \".concat(_this3.queryHash));\n            }\n            onError(new Error(\"\".concat(_this3.queryHash, \" data is undefined\")));\n            return;\n          }\n          try {\n            _this3.setData(data);\n          } catch (error) {\n            onError(error);\n            return;\n          }\n          (_classPrivateFieldGet11 = (_classPrivateFieldGet12 = _classPrivateFieldGet(_this3, _cache).config).onSuccess) === null || _classPrivateFieldGet11 === void 0 || _classPrivateFieldGet11.call(_classPrivateFieldGet12, data, _this3);\n          (_classPrivateFieldGet13 = (_classPrivateFieldGet14 = _classPrivateFieldGet(_this3, _cache).config).onSettled) === null || _classPrivateFieldGet13 === void 0 || _classPrivateFieldGet13.call(_classPrivateFieldGet14, data, _this3.state.error, _this3);\n          _this3.scheduleGc();\n        },\n        onError: onError,\n        onFail: function onFail(failureCount, error) {\n          _classPrivateMethodGet(_this3, _dispatch, _dispatch2).call(_this3, {\n            type: \"failed\",\n            failureCount: failureCount,\n            error: error\n          });\n        },\n        onPause: function onPause() {\n          _classPrivateMethodGet(_this3, _dispatch, _dispatch2).call(_this3, {\n            type: \"pause\"\n          });\n        },\n        onContinue: function onContinue() {\n          _classPrivateMethodGet(_this3, _dispatch, _dispatch2).call(_this3, {\n            type: \"continue\"\n          });\n        },\n        retry: context.options.retry,\n        retryDelay: context.options.retryDelay,\n        networkMode: context.options.networkMode,\n        canRun: function canRun() {\n          return true;\n        }\n      }));\n      return _classPrivateFieldGet(this, _retryer).start();\n    }\n  }]);\n  return Query;\n}(Removable));\nfunction _dispatch2(action) {\n  var _this4 = this;\n  var reducer = function reducer(state) {\n    var _action$meta, _action$dataUpdatedAt;\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchFailureCount: action.failureCount,\n          fetchFailureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"paused\"\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"fetching\"\n        });\n      case \"fetch\":\n        return _objectSpread(_objectSpread(_objectSpread({}, state), fetchState(state.data, _this4.options)), {}, {\n          fetchMeta: (_action$meta = action.meta) !== null && _action$meta !== void 0 ? _action$meta : null\n        });\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) !== null && _action$dataUpdatedAt !== void 0 ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          isInvalidated: false,\n          status: \"success\"\n        }, !action.manual && {\n          fetchStatus: \"idle\",\n          fetchFailureCount: 0,\n          fetchFailureReason: null\n        });\n      case \"error\":\n        var error = action.error;\n        if (isCancelledError(error) && error.revert && _classPrivateFieldGet(_this4, _revertState)) {\n          return _objectSpread(_objectSpread({}, _classPrivateFieldGet(_this4, _revertState)), {}, {\n            fetchStatus: \"idle\"\n          });\n        }\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          fetchFailureReason: error,\n          fetchStatus: \"idle\",\n          status: \"error\"\n        });\n      case \"invalidate\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isInvalidated: true\n        });\n      case \"setState\":\n        return _objectSpread(_objectSpread({}, state), action.state);\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(function () {\n    _this4.observers.forEach(function (observer) {\n      observer.onQueryUpdate();\n    });\n    _classPrivateFieldGet(_this4, _cache).notify({\n      query: _this4,\n      type: \"updated\",\n      action: action\n    });\n  });\n}\nfunction fetchState(data, options) {\n  return _objectSpread({\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\"\n  }, data === void 0 && {\n    error: null,\n    status: \"pending\"\n  });\n}\nfunction getDefaultState(options) {\n  var data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  var hasData = data !== void 0;\n  var initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data: data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt !== null && initialDataUpdatedAt !== void 0 ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport { Query, fetchState };","map":{"version":3,"names":["ensureQueryFn","noop","replaceData","resolveEnabled","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","_initialState","WeakMap","_revertState","_cache","_retryer","_defaultOptions","_abortSignalConsumed","_dispatch","WeakSet","_Removable","_inherits","_super","_createSuper","config","_config$state","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","defaultOptions","setOptions","options","observers","cache","queryKey","queryHash","getDefaultState","state","_classPrivateFieldGet","scheduleGc","_createClass","key","get","meta","_classPrivateFieldGet2","promise","_objectSpread","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","_classPrivateMethodGet","_dispatch2","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","_classPrivateFieldGet3","_classPrivateFieldGet4","then","catch","Promise","resolve","destroy","_get","_getPrototypeOf","prototype","silent","reset","isActive","_this2","some","observer","enabled","isDisabled","getObserversCount","queryFn","dataUpdateCount","errorUpdateCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","arguments","undefined","onFocus","_classPrivateFieldGet5","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","_classPrivateFieldGet6","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","_this3","_this$options$behavio","_context$fetchOptions","continueRetry","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","addSignalProperty","object","Object","defineProperty","enumerable","signal","fetchFn","queryFnContext","persister","context","behavior","onFetch","fetchMeta","_context$fetchOptions2","onError","_classPrivateFieldGet7","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet10","onSettled","initialPromise","fn","abort","bind","onSuccess","_classPrivateFieldGet11","_classPrivateFieldGet12","_classPrivateFieldGet13","_classPrivateFieldGet14","concat","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","canRun","start","action","_this4","reducer","_action$meta","_action$dataUpdatedAt","fetchFailureCount","fetchFailureReason","fetchState","Date","now","status","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/query-core/src/query.ts"],"sourcesContent":["import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const queryFnContext: OmitKeyof<\n        QueryFunctionContext<TQueryKey>,\n        'signal'\n      > = {\n        queryKey: this.queryKey,\n        meta: this.meta,\n      }\n\n      addSignalProperty(queryFnContext)\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn as QueryFunction<any>,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext as QueryFunctionContext<TQueryKey>)\n    }\n\n    // Trigger behavior hook\n    const context: OmitKeyof<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}