{"ast":null,"code":"import _classCallCheck from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _client, _result, _queries, _options, _observers, _combinedResult, _lastCombine, _lastResult, _trackResult, _combineResult, _findMatchingObservers, _onUpdate, _notify;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(function (x) {\n    return !array2.includes(x);\n  });\n}\nfunction replaceAt(array, index, value) {\n  var copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _options = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _lastCombine = /*#__PURE__*/new WeakMap(), _lastResult = /*#__PURE__*/new WeakMap(), _trackResult = /*#__PURE__*/new WeakSet(), _combineResult = /*#__PURE__*/new WeakSet(), _findMatchingObservers = /*#__PURE__*/new WeakSet(), _onUpdate = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n  var _super = _createSuper(QueriesObserver);\n  function QueriesObserver(client, _queries2, _options2) {\n    var _this;\n    _classCallCheck(this, QueriesObserver);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _notify);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _onUpdate);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _findMatchingObservers);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _combineResult);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _trackResult);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _client, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _result, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _queries, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _options, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _observers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _combinedResult, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _lastCombine, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _lastResult, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _client, client);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _options, _options2);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _queries, []);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _observers, []);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _result, []);\n    _this.setQueries(_queries2);\n    return _this;\n  }\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _classPrivateMethodGet(_this2, _onUpdate, _onUpdate2).call(_this2, observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.size) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n      _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, options, notifyOptions) {\n      var _this3 = this;\n      _classPrivateFieldSet(this, _queries, queries);\n      _classPrivateFieldSet(this, _options, options);\n      if (process.env.NODE_ENV !== \"production\") {\n        var queryHashes = queries.map(function (query) {\n          return _classPrivateFieldGet(_this3, _client).defaultQueryOptions(query).queryHash;\n        });\n        if (new Set(queryHashes).size !== queryHashes.length) {\n          console.warn(\"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\");\n        }\n      }\n      notifyManager.batch(function () {\n        var prevObservers = _classPrivateFieldGet(_this3, _observers);\n        var newObserverMatches = _classPrivateMethodGet(_this3, _findMatchingObservers, _findMatchingObservers2).call(_this3, _classPrivateFieldGet(_this3, _queries));\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n        _classPrivateFieldSet(_this3, _observers, newObservers);\n        _classPrivateFieldSet(_this3, _result, newResult);\n        if (!_this3.hasListeners()) {\n          return;\n        }\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _classPrivateMethodGet(_this3, _onUpdate, _onUpdate2).call(_this3, observer, result);\n          });\n        });\n        _classPrivateMethodGet(_this3, _notify, _notify2).call(_this3);\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(this, _result);\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return _classPrivateFieldGet(this, _observers).map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return _classPrivateFieldGet(this, _observers);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries, combine) {\n      var _this4 = this;\n      var matches = _classPrivateMethodGet(this, _findMatchingObservers, _findMatchingObservers2).call(this, queries);\n      var result = matches.map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n      return [result, function (r) {\n        return _classPrivateMethodGet(_this4, _combineResult, _combineResult2).call(_this4, r !== null && r !== void 0 ? r : result, combine);\n      }, function () {\n        return _classPrivateMethodGet(_this4, _trackResult, _trackResult2).call(_this4, result, queries);\n      }];\n    }\n  }]);\n  return QueriesObserver;\n}(Subscribable));\nfunction _trackResult2(result, queries) {\n  var matches = _classPrivateMethodGet(this, _findMatchingObservers, _findMatchingObservers2).call(this, queries);\n  return matches.map(function (match, index) {\n    var observerResult = result[index];\n    return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, function (accessedProp) {\n      matches.forEach(function (m) {\n        m.observer.trackProp(accessedProp);\n      });\n    }) : observerResult;\n  });\n}\nfunction _combineResult2(input, combine) {\n  if (combine) {\n    if (!_classPrivateFieldGet(this, _combinedResult) || _classPrivateFieldGet(this, _result) !== _classPrivateFieldGet(this, _lastResult) || combine !== _classPrivateFieldGet(this, _lastCombine)) {\n      _classPrivateFieldSet(this, _lastCombine, combine);\n      _classPrivateFieldSet(this, _lastResult, _classPrivateFieldGet(this, _result));\n      _classPrivateFieldSet(this, _combinedResult, replaceEqualDeep(_classPrivateFieldGet(this, _combinedResult), combine(input)));\n    }\n    return _classPrivateFieldGet(this, _combinedResult);\n  }\n  return input;\n}\nfunction _findMatchingObservers2(queries) {\n  var _this5 = this;\n  var prevObserversMap = new Map(_classPrivateFieldGet(this, _observers).map(function (observer) {\n    return [observer.options.queryHash, observer];\n  }));\n  var observers = [];\n  queries.forEach(function (options) {\n    var defaultedOptions = _classPrivateFieldGet(_this5, _client).defaultQueryOptions(options);\n    var match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match) {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      });\n    } else {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: new QueryObserver(_classPrivateFieldGet(_this5, _client), defaultedOptions)\n      });\n    }\n  });\n  return observers;\n}\nfunction _onUpdate2(observer, result) {\n  var index = _classPrivateFieldGet(this, _observers).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateFieldSet(this, _result, replaceAt(_classPrivateFieldGet(this, _result), index, result));\n    _classPrivateMethodGet(this, _notify, _notify2).call(this);\n  }\n}\nfunction _notify2() {\n  var _this6 = this;\n  if (this.hasListeners()) {\n    var _classPrivateFieldGet2;\n    var previousResult = _classPrivateFieldGet(this, _combinedResult);\n    var newResult = _classPrivateMethodGet(this, _combineResult, _combineResult2).call(this, _classPrivateMethodGet(this, _trackResult, _trackResult2).call(this, _classPrivateFieldGet(this, _result), _classPrivateFieldGet(this, _queries)), (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _options)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.combine);\n    if (previousResult !== newResult) {\n      notifyManager.batch(function () {\n        _this6.listeners.forEach(function (listener) {\n          listener(_classPrivateFieldGet(_this6, _result));\n        });\n      });\n    }\n  }\n}\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","_client","WeakMap","_result","_queries","_options","_observers","_combinedResult","_lastCombine","_lastResult","_trackResult","WeakSet","_combineResult","_findMatchingObservers","_onUpdate","_notify","_Subscribable","_inherits","_super","_createSuper","client","queries","options","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","setQueries","_createClass","key","onSubscribe","_this2","listeners","size","_classPrivateFieldGet","forEach","observer","subscribe","result","_classPrivateMethodGet","_onUpdate2","onUnsubscribe","destroy","Set","notifyOptions","_this3","process","env","NODE_ENV","queryHashes","map","query","defaultQueryOptions","queryHash","length","console","warn","batch","prevObservers","newObserverMatches","_findMatchingObservers2","match","setOptions","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","some","hasListeners","_notify2","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","_this4","matches","r","_combineResult2","_trackResult2","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","_this5","prevObserversMap","Map","observers","defaultedOptions","get","push","indexOf","_this6","_classPrivateFieldGet2","previousResult","listener"],"sources":["/Users/JarredCianciulli/Desktop/Applications/Projects/OptimaVita/frontend/node_modules/@tanstack/query-core/src/queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#options = options\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    if (process.env.NODE_ENV !== 'production') {\n      const queryHashes = queries.map(\n        (query) => this.#client.defaultQueryOptions(query).queryHash,\n      )\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          '[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.',\n        )\n      }\n    }\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return this.#trackResult(result, queries)\n      },\n    ]\n  }\n\n  #trackResult(\n    result: Array<QueryObserverResult>,\n    queries: Array<QueryObserverOptions>,\n  ) {\n    const matches = this.#findMatchingObservers(queries)\n\n    return matches.map((match, index) => {\n      const observerResult = result[index]!\n      return !match.defaultedQueryOptions.notifyOnChangeProps\n        ? match.observer.trackResult(observerResult, (accessedProp) => {\n            // track property on all observers to ensure proper (synchronized) tracking (#7000)\n            matches.forEach((m) => {\n              m.observer.trackProp(accessedProp)\n            })\n          })\n        : observerResult\n    })\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const observers: Array<QueryObserverMatch> = []\n\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const match = prevObserversMap.get(defaultedOptions.queryHash)\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match,\n        })\n      } else {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: new QueryObserver(this.#client, defaultedOptions),\n        })\n      }\n    })\n\n    return observers\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult\n      const newResult = this.#combineResult(\n        this.#trackResult(this.#result, this.#queries),\n        this.#options?.combine,\n      )\n\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result)\n          })\n        })\n      }\n    }\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}